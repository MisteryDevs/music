import random
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from pyrogram.errors import ChatAdminRequired, UserNotParticipant, ChatWriteForbidden
from AnonXMusic import app

# --- Configure required channels ---
REQUIRED_CHANNELS = [
    {"id": "vip_robotz", "display_name": "Vip_Robotz"},
    {"id": -1002021738886, "display_name": "Ur_Rishu_143"},
]

CAPTIONS = [
    "‡πè ·¥ò ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥Ä ü ü ·¥õ ú·¥á  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á.",
    "‡πè ·¥ä·¥è…™…¥ ·¥õ ú·¥ás·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á üs “ì…™ Äs·¥õ, ·¥õ ú·¥á…¥ ·¥ò Ä·¥áss  Ä·¥á“ì Ä·¥ás ú.",
    "‡πè  è·¥è·¥ú ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä ·¥è“ì ·¥Ä ü ü ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s  ô·¥è·¥õ.",
]

async def build_channel_buttons(client: Client, user_id: int):
    not_joined = []
    for chan in REQUIRED_CHANNELS:
        chat_id = chan["id"]
        name = chan["display_name"]

        try:
            await client.get_chat_member(chat_id, user_id)
            continue
        except UserNotParticipant:
            link = None
            try:
                link = await client.export_chat_invite_link(chat_id)
            except:
                if isinstance(chat_id, str) and not str(chat_id).startswith("-"):
                    link = f"https://t.me/{chat_id}"
            if link:
                not_joined.append((name, link))
    return not_joined


@app.on_message(filters.private & filters.incoming, group=-1)
async def must_join_channels(client: Client, msg: Message):
    not_joined = await build_channel_buttons(client, msg.from_user.id)

    if not not_joined:
        return  # all good ‚Üí continue normally

    caption = random.choice(CAPTIONS)
    buttons = [[InlineKeyboardButton(f"‚Ä¢ {name} ‚Ä¢", url=link)] for name, link in not_joined]
    buttons.append([InlineKeyboardButton("üîÑ  Ä·¥á“ì Ä·¥ás ú", callback_data="refresh_forcejoin")])

    try:
        await msg.reply_text(
            caption,
            reply_markup=InlineKeyboardMarkup(buttons),
        )
        await msg.stop_propagation()
    except ChatWriteForbidden:
        pass


@app.on_callback_query(filters.regex("refresh_forcejoin"))
async def refresh_handler(client: Client, query: CallbackQuery):
    not_joined = await build_channel_buttons(client, query.from_user.id)

    if not not_joined:
        await query.message.edit_text("‚úÖ  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ä·¥è…™…¥·¥á·¥Ö ·¥Ä ü ü  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs! …¥·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ.")
    else:
        caption = random.choice(CAPTIONS)
        buttons = [[InlineKeyboardButton(f"‚Ä¢ {name} ‚Ä¢", url=link)] for name, link in not_joined]
        buttons.append([InlineKeyboardButton("üîÑ  Ä·¥á“ì Ä·¥ás ú", callback_data="refresh_forcejoin")])

        await query.message.edit_text(
            caption,
            reply_markup=InlineKeyboardMarkup(buttons),
        )